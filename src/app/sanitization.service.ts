import { Injectable, EventEmitter } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { NoteService } from './note.service';
import { firstValueFrom } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class SanitizationService {
  private replacements: { [key: string]: string } = {
    '<spade>': '<span style="color: black">‚ô†</span>',
    '<club>': '<span style="color: black">‚ô£</span>',
    '<heart>': '<span style="color: red">‚ô•</span>',
    '<diamond>': '<span style="color: red">‚ô¶</span>',
    '<face-down-card>': '‚î¨',
    '<face-up-card>': '‚î¥',
    '<face-down-packet>': '‚ï§',
    '<face-up-packet>': '‚ïß',
    '<double-face-card>': '‚îº',
    '<double-back-card>': 'ÍûÆ',
    '<magician>': '…±',
    '<spectator>': ' Ç',
    '<card-selected>': '‚Üë',
    '<card-returned>': '‚Üì',
    '<selection>': 'Œµ',
    '<card-dealt-from-top>': '‚Üí',
    '<card-placed-on-top>': '‚Üê',
    '<card-switch>': '‚Üî',
    '<shuffle>': '‚ï¨',
    '<cut>': '‚ïó',
    '<joker>': 'üÉè',
    '<impromptu>': '‚úΩ',
    '<table>': 'Õ≤',
    '<standing>': 'Œª',
    '<wearing-pockets>': 'œ∑',
    '<packet-effect>': '‚ñ±',
    '<any-surface>': 'Ô∏ø',
    '<angle-sensitive>': '‚ú•',
    '<pen>': '‚úê',
    '<coins>': '¬¢',
    '<bills>': '$',
    '<wallet>': '‚±≤',
    '<hankerchief>': 'Íúß',
    '<envelope>': '‚úâ',
    '<dice>': '‚öÇ',
    '\n': '<br>'
  };

  // Event emitter to notify when a note link is clicked
  public noteLinkClicked = new EventEmitter<string>();

  constructor(
    private sanitizer: DomSanitizer,
    private noteService: NoteService
  ) {}

  async sanitizeContent(content: string | undefined): Promise<SafeHtml> {
    if (!content) {
      return this.sanitizer.bypassSecurityTrustHtml('');
    }

    let sanitizedContent = content;

    // Regular expression to find note ID tags like <a32>, <r10>, etc.
    const noteIdRegex = /<([rats]\d+)>/g;
    let match;

    while ((match = noteIdRegex.exec(content)) !== null) {
      const fullTag = match[0]; // e.g., "<a32>"
      const noteId = match[1];  // e.g., "a32"

      if (this.noteService.isValidNoteId(noteId)) {
        try {
          const title = await firstValueFrom(this.noteService.getNoteTitle(noteId));
          // Use a span with an onclick event to emit the note ID
          const link = `<span style="color: blue; text-decoration: underline; cursor: pointer;" onclick="document.dispatchEvent(new CustomEvent('noteLinkClick', { detail: '${noteId}' }))">${title}</span>`;
          sanitizedContent = sanitizedContent.replace(fullTag, link);
        } catch (error) {
          sanitizedContent = sanitizedContent.replace(fullTag, noteId);
        }
      }
    }

    for (const [tag, replacement] of Object.entries(this.replacements)) {
      sanitizedContent = sanitizedContent.split(tag).join(replacement);
    }

    return this.sanitizer.bypassSecurityTrustHtml(sanitizedContent);
  }
}